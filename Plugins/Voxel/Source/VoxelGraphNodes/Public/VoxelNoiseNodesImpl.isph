// Copyright Voxel Plugin, Inc. All Rights Reserved.

#pragma once

#include "VoxelMinimal.isph"

// ReSharper disable CppCStyleCast
// ReSharper disable CppVariableCanBeMadeConstexpr

// Noise functions below are based off FastNoise2, whose license is below
//
// MIT License
//
// Copyright (c) 2020 Jordan Peck
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

FORCEINLINE float InterpQuintic(const float Value)
{
	return Value * Value * Value * (Value * (Value * 6.f - 15.f) + 10.f);
}
FORCEINLINE float2 InterpQuintic(const float2 Value)
{
	return MakeFloat2(InterpQuintic(Value.x), InterpQuintic(Value.y));
}
FORCEINLINE float3 InterpQuintic(const float3 Value)
{
	return MakeFloat3(InterpQuintic(Value.x), InterpQuintic(Value.y), InterpQuintic(Value.z));
}

#define NoisePrimes_X ((uniform int32)501125321)
#define NoisePrimes_Y ((uniform int32)1136930381)
#define NoisePrimes_Z ((uniform int32)1720413743)
#define NoisePrimes_W ((uniform int32)1066037191)

#define NoisePrimes_int2 MakeInt2(NoisePrimes_X, NoisePrimes_Y)
#define NoisePrimes_int3 MakeInt3(NoisePrimes_X, NoisePrimes_Y, NoisePrimes_Z)

#define Sqrt2 1.4142135623730950488f
#define Sqrt3 1.7320508075688772935f

FORCEINLINE float GetGradientDot(const int32 Hash, const float X, const float Y)
{
	const int32 Index = Hash & 7;

#if TARGET_WIDTH == 8
	const varying float A = MakeRegister(1.f + Sqrt2, -1.f - Sqrt2, 1.f + Sqrt2, -1.f - Sqrt2, 1.f, -1.f, 1.f, -1.f);
	const varying float B = MakeRegister(1.f, 1.f, -1.f, -1.f, 1.f + Sqrt2, 1.f + Sqrt2, -1.f - Sqrt2, -1.f - Sqrt2);

	const float GradientX = shuffle(A, Index);
	const float GradientY = shuffle(B, Index);

	return GradientX * X + GradientY * Y;
#elif TARGET_WIDTH == 4
	const varying float A0 = MakeRegister(1.f + Sqrt2, -1.f - Sqrt2, 1.f + Sqrt2, -1.f - Sqrt2);
	const varying float A1 = MakeRegister(1.f, -1.f, 1.f, -1.f);

	const varying float B0 = MakeRegister(1.f, 1.f, -1.f, -1.f);
	const varying float B1 = MakeRegister(1.f + Sqrt2, 1.f + Sqrt2, -1.f - Sqrt2, -1.f - Sqrt2);

	const float GradientX = Index < 4 ? shuffle(A0, Index) : shuffle(A1, Index - 4);
	const float GradientY = Index < 4 ? shuffle(B0, Index) : shuffle(B1, Index - 4);

	return GradientX * X + GradientY * Y;
#else
#error "Unsupported TARGET_WIDTH"
	unsupportedTargetWidth();
	return 0.f;
#endif
}
FORCEINLINE float GetGradientDot(const int32 Hash, const float X, const float Y, const float Z)
{
	const int32 HashAnd13 = Hash & 13;

	// If h < 8 then x, else y
	const float U = HashAnd13 < 8 ? X : Y;

	// If h < 4 then y else if h is 12 or 14 then x else z
	const float V = HashAnd13 < 2 ? Y : HashAnd13 == 12 ? X : Z;

	// If h1 then -u else u
	// If h2 then -v else v
	const float H1 = floatbits(Hash << 31);
	const float H2 = floatbits((Hash & 2) << 30);

	// Then add them
	return floatbits(intbits(U) ^ intbits(H1)) + floatbits(intbits(V) ^ intbits(H2));
}

FORCEINLINE int32 HashPrimes(int32 Seed, int32 A, int32 B)
{
	int32 Hash = Seed;
	Hash ^= (A ^ B);
	Hash *= 0x27d4eb2d;
	return (Hash >> 15) ^ Hash;
}
FORCEINLINE int32 HashPrimes(int32 Seed, int32 A, int32 B, int32 C)
{
	int32 Hash = Seed;
	Hash ^= (A ^ B ^ C);
	Hash *= 0x27d4eb2d;
	return (Hash >> 15) ^ Hash;
}

FORCEINLINE int32 HashPrimesHB(int32 Seed, int32 A, int32 B)
{
	int32 Hash = Seed;
	Hash ^= (A ^ B);
	Hash *= 0x27d4eb2d;
	return Hash;
}
FORCEINLINE int32 HashPrimesHB(int32 Seed, int32 A, int32 B, int32 C)
{
	int32 Hash = Seed;
	Hash ^= (A ^ B ^ C);
	Hash *= 0x27d4eb2d;
	return Hash;
}

FORCEINLINE float GetPerlin2D(const int32 Seed, float2 Position)
{
	// Small offset to avoid always getting the same value when querying at integer coordinates
	Position.x += 0.04902460144f;
	Position.y += 0.02112610644f;

	const float2 Floor = floor(Position);

	const int2 PositionA = MakeInt2(Floor) * NoisePrimes_int2;
	const int2 PositionB = PositionA + NoisePrimes_int2; //  MakeInt2(Floor + 1) * NoisePrimes_int2;

	const float2 AlphaA = Position - Floor;
	const float2 AlphaB = AlphaA - 1.f; // Position - (Floor + 1)

	const float2 QuinticAlpha = InterpQuintic(AlphaA);

	return 0.579106986522674560546875f *
		BilinearInterpolation(
			GetGradientDot(HashPrimes(Seed, PositionA.x, PositionA.y), AlphaA.x, AlphaA.y),
			GetGradientDot(HashPrimes(Seed, PositionB.x, PositionA.y), AlphaB.x, AlphaA.y),
			GetGradientDot(HashPrimes(Seed, PositionA.x, PositionB.y), AlphaA.x, AlphaB.y),
			GetGradientDot(HashPrimes(Seed, PositionB.x, PositionB.y), AlphaB.x, AlphaB.y),
			QuinticAlpha.x,
			QuinticAlpha.y);
}

FORCEINLINE float GetPerlin3D(const int32 Seed, float3 Position)
{
	// Small offset to avoid always getting the same value when querying at integer coordinates
	Position.x += 0.04902460144f;
	Position.y += 0.02112610644f;
	Position.y += 0.06403176963f;

	const float3 Floor = floor(Position);

	const int3 PositionA = MakeInt3(Floor) * NoisePrimes_int3;
	const int3 PositionB = PositionA + NoisePrimes_int3; // MakeInt3(Floor + 1) * NoisePrimes_int2;

	const float3 AlphaA = Position - Floor;
	const float3 AlphaB = AlphaA - 1.f; // Position - (Floor + 1)

	const float3 QuinticAlpha = InterpQuintic(AlphaA);

	return 0.964921414852142333984375f *
		TrilinearInterpolation(
			GetGradientDot(HashPrimes(Seed, PositionA.x, PositionA.y, PositionA.z), AlphaA.x, AlphaA.y, AlphaA.z),
			GetGradientDot(HashPrimes(Seed, PositionB.x, PositionA.y, PositionA.z), AlphaB.x, AlphaA.y, AlphaA.z),
			GetGradientDot(HashPrimes(Seed, PositionA.x, PositionB.y, PositionA.z), AlphaA.x, AlphaB.y, AlphaA.z),
			GetGradientDot(HashPrimes(Seed, PositionB.x, PositionB.y, PositionA.z), AlphaB.x, AlphaB.y, AlphaA.z),
			GetGradientDot(HashPrimes(Seed, PositionA.x, PositionA.y, PositionB.z), AlphaA.x, AlphaA.y, AlphaB.z),
			GetGradientDot(HashPrimes(Seed, PositionB.x, PositionA.y, PositionB.z), AlphaB.x, AlphaA.y, AlphaB.z),
			GetGradientDot(HashPrimes(Seed, PositionA.x, PositionB.y, PositionB.z), AlphaA.x, AlphaB.y, AlphaB.z),
			GetGradientDot(HashPrimes(Seed, PositionB.x, PositionB.y, PositionB.z), AlphaB.x, AlphaB.y, AlphaB.z),
			QuinticAlpha.x,
			QuinticAlpha.y,
			QuinticAlpha.z);
}

FORCEINLINE float2 GetCellularDirection2D(const int32 Seed, const int2 HashPosition, const int32 IndexX, const int32 IndexY)
{
	const int32 Hash = HashPrimesHB(
		Seed,
		HashPosition.x + IndexX * NoisePrimes_X,
		HashPosition.y + IndexY * NoisePrimes_Y);

	return normalize(MakeFloat2(
		((Hash >> 0) & MAX_uint16) - MAX_uint16 / 2.0f,
		((Hash >> 16) & MAX_uint16) - MAX_uint16 / 2.0f
	));
}

FORCEINLINE float3 GetCellularDirection3D(const int32 Seed, const int3 HashPosition, const int32 IndexX, const int32 IndexY, const int32 IndexZ)
{
	const int32 Hash = HashPrimesHB(
		Seed,
		HashPosition.x + IndexX * NoisePrimes_X,
		HashPosition.y + IndexY * NoisePrimes_Y,
		HashPosition.z + IndexZ * NoisePrimes_Z);

	const int32 TenBits = (1 << 10) - 1;
	return normalize(MakeFloat3(
		((Hash >> 0) & TenBits) - TenBits / 2.0f,
		((Hash >> 10) & TenBits) - TenBits / 2.0f,
		((Hash >> 20) & TenBits) - TenBits / 2.0f
	));
}

FORCEINLINE float GetCellularNoise2D(const int32 Seed, const float2 Position, const float Jitter)
{
	const float ScaledJitter = Jitter / 4.f;

	float Distance = 0;

	const float2 Floor = floor(Position);
	const float2 LocalPosition = Position - Floor;
	const int2 HashPosition = MakeInt2(Floor) * NoisePrimes_int2;

	UNROLL
	for (uniform int32 IndexX = -1; IndexX < 2; IndexX++)
	{
		UNROLL
		for (uniform int32 IndexY = -1; IndexY < 2; IndexY++)
		{
			const float2 Direction = GetCellularDirection2D(Seed, HashPosition, IndexX, IndexY);
			const float2 Center = MakeFloat2(IndexX, IndexY) + ScaledJitter * Direction;
			const float NewDistance = DistanceSquared(Center, LocalPosition);

			if (IndexX == -1 && IndexY == -1)
			{
				Distance = NewDistance;
			}
			else
			{
				Distance = min(Distance, NewDistance);
			}
		}
	}

	return sqrt(Distance);
}

FORCEINLINE float GetCellularNoise3D(const int32 Seed, const float3 Position, const float Jitter)
{
	const float ScaledJitter = Jitter / 4.f;

	float Distance = 0;

	const float3 Floor = floor(Position);
	const float3 LocalPosition = Position - Floor;
	const int3 HashPosition = MakeInt3(Floor) * NoisePrimes_int3;

	UNROLL
	for (uniform int32 IndexX = -1; IndexX < 2; IndexX++)
	{
		UNROLL
		for (uniform int32 IndexY = -1; IndexY < 2; IndexY++)
		{
			UNROLL
			for (uniform int32 IndexZ = -1; IndexZ < 2; IndexZ++)
			{
			    const float3 Direction = GetCellularDirection3D(Seed, HashPosition, IndexX, IndexY, IndexZ);
				const float3 Center = MakeFloat3(IndexX, IndexY, IndexZ) + ScaledJitter * Direction;
				const float NewDistance = DistanceSquared(Center, LocalPosition);

				if (IndexX == -1 && IndexY == -1 && IndexZ == -1)
				{
					Distance = NewDistance;
				}
				else
				{
					Distance = min(Distance, NewDistance);
				}
			}
		}
	}

	return sqrt(Distance);
}

FORCEINLINE float GetTrueDistanceCellularNoise2D(const int32 Seed, const float2 Position, const float Jitter, varying float2* CellPosition)
{
	const float ScaledJitter = Jitter / 4.f;

	float DistanceToCenter = 0.f;
	float2 MinCenter;
	int2 MinIndices;

	const float2 Floor = floor(Position);
	const float2 LocalPosition = Position - Floor;
	const int2 HashPosition = MakeInt2(Floor) * NoisePrimes_int2;

	UNROLL
	for (uniform int32 IndexX = -1; IndexX <= 2; IndexX++)
	{
		UNROLL
		for (uniform int32 IndexY = -1; IndexY <= 2; IndexY++)
		{
			const float2 Direction = GetCellularDirection2D(Seed, HashPosition, IndexX, IndexY);
			const float2 Center = MakeFloat2(IndexX, IndexY) + ScaledJitter * Direction;
			const float NewDistance = DistanceSquared(Center, LocalPosition);

			if ((IndexX == -1 && IndexY == -1) || NewDistance < DistanceToCenter)
			{
				DistanceToCenter = NewDistance;
				MinCenter = Center;
				MinIndices = MakeInt2(IndexX, IndexY);
			}
		}
	}

	*CellPosition = Floor + MinCenter;

	float DistanceToEdge = 1e9;

	UNROLL
	for (uniform int32 IndexX = -1; IndexX <= 2; IndexX++)
	{
		UNROLL
		for (uniform int32 IndexY = -1; IndexY <= 2; IndexY++)
		{
			if (MinIndices.x == IndexX &&
				MinIndices.y == IndexY)
			{
				continue;
			}

			const float2 Direction = GetCellularDirection2D(Seed, HashPosition, IndexX, IndexY);
			const float2 Center = MakeFloat2(IndexX, IndexY) + ScaledJitter * Direction;

			DistanceToEdge = min(DistanceToEdge, dot((MinCenter + Center) / 2.f - LocalPosition, normalize(Center - MinCenter)));
		}
	}

	return sqrt(DistanceToEdge);
}