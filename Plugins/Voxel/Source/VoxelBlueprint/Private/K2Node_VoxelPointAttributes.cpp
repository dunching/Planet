// Copyright Voxel Plugin, Inc. All Rights Reserved.

#include "K2Node_VoxelPointAttributes.h"
#include "Point/VoxelPointFunctionLibrary.h"
#include "Kismet2/BlueprintEditorUtils.h"

void UK2Node_VoxelPointAttributeBase::AllocateDefaultPins()
{
	Super::AllocateDefaultPins();

	if (UEdGraphPin* TypePin = FindPin(STATIC_FNAME("Type")))
	{
		TypePin->bHidden = true;
	}
}

void UK2Node_VoxelPointAttributeBase::GetNodeContextMenuActions(UToolMenu* Menu, UGraphNodeContextMenuContext* Context) const
{
	Super::GetNodeContextMenuActions(Menu, Context);

	if (!Context->Pin ||
		!IsPinWildcard(*Context->Pin))
	{
		return;
	}

	AddConvertPinContextAction(Menu, Context, FVoxelPinTypeSet::AllBuffers());
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void UK2Node_VoxelPointAttributeBase::PostReconstructNode()
{
	Super::PostReconstructNode();

	const UEdGraphSchema_K2* Schema = GetDefault<UEdGraphSchema_K2>();
	for (UEdGraphPin* Pin : GetAllPins())
	{
		if (!IsPinWildcard(*Pin))
		{
			continue;
		}

		Pin->PinType = ValueType.GetInnerExposedType().GetEdGraphPinType_K2();

		if (Pin->DoesDefaultValueMatchAutogenerated())
		{
			Schema->ResetPinToAutogeneratedDefaultValue(Pin, false);
		}
	}

	if (UEdGraphPin* TypePin = FindPin(STATIC_FNAME("Type")))
	{
		TypePin->DefaultValue = FVoxelObjectUtilities::PropertyToText_Direct(
			*FVoxelObjectUtilities::MakeStructProperty(FVoxelPinType::StaticStruct()),
			reinterpret_cast<void*>(&ValueType),
			nullptr);
	}
}

bool UK2Node_VoxelPointAttributeBase::IsConnectionDisallowed(const UEdGraphPin* MyPin, const UEdGraphPin* OtherPin, FString& OutReason) const
{
	if (IsPinWildcard(*MyPin) &&
		!ValueType.IsValid())
	{
		OutReason = "Pin type must be promoted manually to this type";
		return true;
	}

	return Super::IsConnectionDisallowed(MyPin, OtherPin, OutReason);
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

void UK2Node_VoxelPointAttributeBase::OnPinTypeChange(UEdGraphPin& Pin, const FVoxelPinType& NewType)
{
	SetType(Pin, NewType);
}

bool UK2Node_VoxelPointAttributeBase::IsPinWildcard(const UEdGraphPin& Pin) const
{
	return Pin.PinName == STATIC_FNAME("Value");
}

void UK2Node_VoxelPointAttributeBase::SetType(UEdGraphPin& Pin, const FVoxelPinType& NewType)
{
	if (!ensure(NewType.IsBuffer()))
	{
		return;
	}
	if (ValueType == NewType)
	{
		return;
	}

	ValueType = NewType;

	if (Pin.LinkedTo.Num() > 0 &&
		Pin.PinType != ValueType.GetInnerExposedType().GetEdGraphPinType_K2())
	{
		if (Pin.PinFriendlyName.IsEmpty())
		{
			Pin.PinFriendlyName = FText::FromName(Pin.PinName);
		}

		Pin.PinName = CreateUniquePinName(Pin.PinName);
	}

	ReconstructNode();

	// Let the graph know to refresh
	GetGraph()->NotifyGraphChanged();

	UBlueprint* Blueprint = GetBlueprint();
	if (!Blueprint->bBeingCompiled)
	{
		FBlueprintEditorUtils::MarkBlueprintAsModified(Blueprint);
		Blueprint->BroadcastChanged();
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

UK2Node_VoxelSetPointAttribute::UK2Node_VoxelSetPointAttribute()
{
	FunctionReference.SetExternalMember(
		GET_FUNCTION_NAME_CHECKED(UVoxelPointFunctionLibrary, K2_SetPointAttribute),
		UVoxelPointFunctionLibrary::StaticClass());
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

UK2Node_VoxelGetPointAttribute::UK2Node_VoxelGetPointAttribute()
{
	FunctionReference.SetExternalMember(
		GET_FUNCTION_NAME_CHECKED(UVoxelPointFunctionLibrary, K2_GetPointAttribute),
		UVoxelPointFunctionLibrary::StaticClass());
}