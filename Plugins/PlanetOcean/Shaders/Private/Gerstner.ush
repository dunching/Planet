#define GRAVITY 981.f

struct Gerstner
{
    static float2 GetSingleWaveDirection(float2 InWindDirection, float InSpread, int2 Seed)
    {
        float2 Direction = float2(cos((float) Seed.x / 801571.f), sin((float) Seed.y / 10223.f));
        return normalize(lerp(InWindDirection, (Direction * 2.f) - 1.f, InSpread));
    }
    
    
    static FWaveParams GetWaveParams(const int WaveIndex, const FMaterialParams MaterialParams, int2 Seed)
    {
        FWaveParams OutWaveParams = (FWaveParams) 0;

        const float IndexFrac = (float) WaveIndex / (float) MaterialParams._WaveCount;
        
        float2 Direction = GetSingleWaveDirection(MaterialParams._WindDirection, MaterialParams._Spread, Seed);
        
        const float Alpha = pow(IndexFrac, MaterialParams._WaveDistribution);
          
        OutWaveParams.Direction = normalize(lerp(MaterialParams._WindDirection, (Direction * 2.f) - 1.f, MaterialParams._Spread));
        OutWaveParams.Wavelength = lerp(MaterialParams._MinMaxWavelength.y, MaterialParams._MinMaxWavelength.x, Alpha);
        OutWaveParams.Steepness = lerp(MaterialParams._MinMaxSteepness.y, MaterialParams._MinMaxSteepness.x, Alpha);
        OutWaveParams.Amplitude = lerp(MaterialParams._MinMaxAmplitude.y, MaterialParams._MinMaxAmplitude.x, Alpha);
          
        return OutWaveParams;
    }
    
    static WaveOutput GetSingleGerstnerWave(int InWaveCount, FWaveParams InWaveParams, float3 InPositionExcludingOffsets, float InTime)
    {
        WaveOutput OutWave = (WaveOutput) 0;
        
        float Dispersion = 2.f * PI / InWaveParams.Wavelength;
        float2 WaveVector = InWaveParams.Direction * Dispersion;
        float WaveSpeed = sqrt(Dispersion * GRAVITY);
        float WaveTime = WaveSpeed * InTime;
        
        float WavePos = dot(float2(InPositionExcludingOffsets.xy), WaveVector) - WaveTime;
            
        float WaveSin = sin(WavePos);
        float WaveCos = cos(WavePos);
            
        float wKA = InWaveParams.Amplitude * Dispersion;
        float q = InWaveParams.Steepness / wKA;
            
            
        // WPO
        OutWave.WPO.xy = -q * WaveSin * InWaveParams.Direction * InWaveParams.Amplitude;
        OutWave.WPO.z = WaveCos * InWaveParams.Amplitude;
                    
            
        // Normal
        OutWave.Normal.xy = WaveSin * wKA * InWaveParams.Direction;
        OutWave.Normal.z = WaveCos * InWaveParams.Steepness * saturate((InWaveParams.Amplitude * 50.f) / InWaveParams.Wavelength);
        
        // Foam Mask
        OutWave.FoamMask = -WaveSin / InWaveCount;
        return OutWave;
    }

    static WaveOutput GetAllGerstnerWaves(const float3 Position, const FMaterialParams MatParams, int2 Seed)
    {
        WaveOutput CurrentWave = (WaveOutput) 0;
        WaveOutput OutWaves = (WaveOutput) 0;
        
        for (int WaveIndex = 0; WaveIndex < MatParams._WaveCount; WaveIndex++)
        {
            Seed = FMath::GetRandomInt2(Seed);
            FWaveParams WaveParams = GetWaveParams(WaveIndex, MatParams, Seed);
            
            CurrentWave = GetSingleGerstnerWave(MatParams._WaveCount, WaveParams, Position, MatParams._Time * MatParams._Speed);
            OutWaves = AddWaves(OutWaves, CurrentWave);
        }
        return OutWaves;
    }
    
    static WaveOutput AddWaves(WaveOutput InWaveToAddTo, const WaveOutput InWaveToAddFrom)
    {
        InWaveToAddTo.WPO += InWaveToAddFrom.WPO;
        InWaveToAddTo.Normal += InWaveToAddFrom.Normal;
        InWaveToAddTo.FoamMask += InWaveToAddFrom.FoamMask;
        
        return InWaveToAddTo;
    }
    
    static float3 FinalizeNormal(float3 inNormal)
    {
        return normalize(float3(inNormal.xy, 1.0f - inNormal.z));
    }
    
    static float FinalizeFoamMask(float InFoamMask, float InFoamStrength)
    {
        InFoamMask = saturate(InFoamMask);
        InFoamStrength = saturate(1 - (InFoamStrength * 0.5 + 0.5));
        
        float Min = 0.f;
        Min += InFoamStrength;
        
        float Max = 1.f;
        Max -= InFoamStrength;
        
        return smoothstep(Min, Max, InFoamMask);
    } 
};